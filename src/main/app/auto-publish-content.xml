<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:slack="http://www.mulesoft.org/schema/mule/slack"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/slack http://www.mulesoft.org/schema/mule/slack/current/mule-slack.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="4321" doc:name="HTTP Listener Configuration"/>
    <flow name="manualTriggerFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/publish" doc:name="HTTP"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"result": "started"
}]]></dw:set-payload>
        </dw:transform-message>
        <async doc:name="Async">
            <flow-ref name="auto-publish-contentFlow" doc:name="Flow Reference"/>
        </async>
    </flow>
    <flow name="auto-publish-contentFlow">
        <poll doc:name="Poll every first day of the month (0 0 0 1 * ?)">
            <schedulers:cron-scheduler expression="0 0 0 1 * ?"/>
            <logger message="Starting autopublishing of items older than 6 months" level="INFO" doc:name="Starting autopublishing of items older than 6 months"/>
        </poll>
        <set-variable variableName="slackStringBuilder" value="#[new java.lang.StringBuilder()]" doc:name="Set slackStringBuilder"/>
        <flow-ref name="initialize_dates" doc:name="initialize_dates"/>
        <flow-ref name="initialize_organisations" doc:name="initialize_organisations"/>
        <foreach collection="#[flowVars.organisations]" doc:name="For Each Organisation">
            <flow-ref name="initialize_looping_variables" doc:name="initialize_looping_variables"/>
            <expression-component doc:name="Expression"><![CDATA[flowVars.slackStringBuilder
	.append(String.format("\nPublishing %s items for %s", payload.totalNrOfResults, flowVars.organisationName));]]></expression-component>
            <logger message="#[payload.totalNrOfResults] items will be published for organisation #[flowVars.organisationName]" level="INFO" doc:name="X items will be published"/>
            <flow-ref name="loop_over_pages" doc:name="loop_over_pages"/>
        </foreach>
        <amqp:outbound-endpoint queueName="${rabbit.notificationqueue}" responseTimeout="10000" connector-ref="AMQP_0_9_Connector" doc:name="Notify the mailer to start working!"/>
        <async doc:name="Async">
            <set-variable variableName="attachments" value="#[new java.util.ArrayList()]" doc:name="Set attachments"/>
            <expression-component doc:name="Expression"><![CDATA[org.mule.modules.slack.client.model.chat.attachment.ChatAttachment attachment = new org.mule.modules.slack.client.model.chat.attachment.ChatAttachment();

attachment.setText(flowVars.slackStringBuilder.toString());
attachment.setTitle(server.dateTime.toString());

flowVars.attachments.add(attachment);]]></expression-component>
            <logger message="Sending a message to Slack!" level="WARN" doc:name="Logger"/>
            <until-successful maxRetries="5" millisBetweenRetries="5000" synchronous="true" doc:name="Until Successful">
                <slack:upload-file-as-input-streams config-ref="Slack__Token_Configuration" channelID="${slack.channelid}" fileName="autopublish-content-#[org.joda.time.format.DateTimeFormat.forPattern(&quot;E d MMMM yyyy&quot;).print(new org.joda.time.DateTime())].log" fileType="text" initialComment="[${mule.env}] - Attached are the logs from the auto publish service that ran on #[org.joda.time.format.DateTimeFormat.forPattern(&quot;E d MMMM yyyy&quot;).print(new org.joda.time.DateTime())]." title="[${mule.env}] - Autopublish logfile #[org.joda.time.format.DateTimeFormat.forPattern(&quot;E d MMMM yyyy&quot;).print(new org.joda.time.DateTime())]" inputStream-ref="#[new ByteArrayInputStream(flowVars.slackStringBuilder.toString().getBytes())]" doc:name="Slack"/>
            </until-successful>
        </async>
    </flow>
    <sub-flow name="initialize_dates">
        <set-variable variableName="currentDateTime" value="#[server.dateTime]" doc:name="Set currentDateTime //server.dateTime"/>
        <set-variable variableName="startDate" value="#[&quot;1985:01:01&quot;]" doc:name="Set startDate"/>
        <set-variable variableName="endDate" value="#[new org.mule.el.datetime.DateTime(flowVars.currentDateTime).plusMonths(-6).format(&quot;yyyy:MM:01 00:00:00&quot;)]" doc:name="Set endDate plusMonths(-6)"/>
        <logger message="Publishing items from #[flowVars.startDate] until #[flowVars.endDate]..." level="INFO" doc:name="Publishing items from Y until Z"/>
    </sub-flow>
    <sub-flow name="initialize_organisations">
        <until-successful maxRetries="5" millisBetweenRetries="5000" synchronous="true" doc:name="Until Successful">
            <http:request config-ref="MAM_Monitoring_API" path="/json.php" method="GET" doc:name="Request all organisations">
                <http:request-builder>
                    <http:query-param paramName="config" value="default"/>
                    <http:query-param paramName="service" value="MediaHaven"/>
                    <http:query-param paramName="view" value="Organisations"/>
                    <http:query-param paramName="order" value="0"/>
                    <http:query-param paramName="direction" value="down"/>
                    <http:query-param paramName="page" value="0"/>
                    <http:query-param paramName="cumulative" value="1"/>
                    <http:query-param paramName="granularity" value="month"/>
                    <http:query-param paramName="priority" value="0"/>
                    <http:query-param paramName="results" value="1000"/>
                    <http:query-param paramName="limit" value="1000"/>
                    <http:query-param paramName="filter[results]" value="1000"/>
                    <http:query-param paramName="filter[limit]" value="1000"/>
                    <http:header headerName="Authorization" value="${mediahaven.monitoring.authstring}"/>
                </http:request-builder>
            </http:request>
        </until-successful>
        <dw:transform-message doc:name="Filter organisations">
            <dw:input-payload doc:sample="sample_data/json_3.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter (
	$.name != 'viaa' and
	$.name != 'failures' and
	$.name != 'plantentuinmeise' and
	$.name != 'testbeeld' and
	$.name != 'zeticon'
)]]></dw:set-payload>
        </dw:transform-message>
        <set-variable variableName="organisations" value="#[payload]" doc:name="Set organisations"/>
    </sub-flow>
    <sub-flow name="initialize_looping_variables">
        <set-variable variableName="organisationName" value="#[payload.name]" doc:name="Set organisationName"/>
        <logger message="Checking #[flowVars.organisationName]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="authorization" value="#['Basic ' + org.apache.commons.codec.binary.Base64.encodeBase64String((&quot;viaa@&quot; + flowVars.organisationName + &quot;:&quot; + '${mediahaven.password}').getBytes())]" doc:name="Set authorization"/>
        <until-successful maxRetries="5" millisBetweenRetries="5000" synchronous="true" doc:name="Until Successful">
            <http:request config-ref="MAM_Rest_API" path="/" method="GET" doc:name="Retrieve totalNrOfResults">
                <http:request-builder>
                    <http:query-param paramName="q" value="+(MediaObjectOwnerName:#[flowVars.organisationName] AND (MediaObjectArchiveStatus:on_tape OR MediaObjectArchiveStatus:on_disk) AND MediaObjectArchiveDate:[&quot;#[flowVars.startDate]&quot; TO &quot;#[flowVars.endDate]&quot;] AND (MediaObjectType:video OR MediaObjectType:audio OR MediaObjectType:document) AND MediaObjectFragmentisiningestspace:1)"/>
                    <http:query-param paramName="nrOfResults" value="1"/>
                    <http:query-param paramName="sort" value="MediaObjectArchiveDate"/>
                    <http:query-param paramName="direction" value="asc"/>
                    <http:header headerName="Authorization" value="#[flowVars.authorization]"/>
                </http:request-builder>
            </http:request>
        </until-successful>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="nrOfResults" value="#[payload.totalNrOfResults]" doc:name="Set nrOfResults"/>
        <set-variable variableName="pagesize" value="#[(int) '${pagesize}']" doc:name="Set pagesize"/>
        <set-variable variableName="pageCounter" value="#[(int) Math.round(Math.ceil((flowVars.nrOfResults / flowVars.pagesize)))]" doc:name="Set pageCounter"/>
        <set-variable variableName="pages" value="#[new java.lang.Integer[flowVars.pageCounter]]" doc:name="Set pages"/>
    </sub-flow>
    <sub-flow name="loop_over_pages">
        <choice doc:name="Choice">
            <when expression="#[flowVars.pages.length &gt; 0]">
                <foreach collection="#[java.util.Arrays.asList(flowVars.pages)]" counterVariableName="pageCounter" doc:name="For each page">
                    <set-variable variableName="startIndex" value="#[(flowVars.pageCounter - 1) * '${pagesize}']" doc:name="Set startIndex"/>
                    <logger message="Querying from index #[flowVars.startIndex]" level="INFO" doc:name="Querying from index [startIndex]"/>
                    <enricher source="#[payload]" target="#[flowVars.searchResults]" doc:name="Set searchResults">
                        <until-successful maxRetries="5" millisBetweenRetries="5000" synchronous="true" doc:name="Until Successful">
                            <http:request config-ref="MAM_Rest_API" path="/" method="GET" doc:name="Request fragments for this page">
                                <http:request-builder>
                                    <http:query-param paramName="q" value="+(MediaObjectOwnerName:#[flowVars.organisationName] AND (MediaObjectArchiveStatus:on_tape OR MediaObjectArchiveStatus:on_disk) AND MediaObjectArchiveDate:[&quot;#[flowVars.startDate]&quot; TO &quot;#[flowVars.endDate]&quot;] AND (MediaObjectType:video OR MediaObjectType:audio OR MediaObjectType:document) AND MediaObjectFragmentisiningestspace:1)"/>
                                    <http:query-param paramName="nrOfResults" value="${pagesize}"/>
                                    <http:query-param paramName="sort" value="MediaObjectArchiveDate"/>
                                    <http:query-param paramName="direction" value="asc"/>
                                    <http:query-param paramName="startIndex" value="#[flowVars.startIndex]"/>
                                    <http:header headerName="Authorization" value="#[flowVars.authorization]"/>
                                </http:request-builder>
                            </http:request>
                        </until-successful>
                    </enricher>
                    <set-payload value="#[flowVars.searchResults]" doc:name="Set Payload to searchResults"/>
                    <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
                    <set-payload value="#[payload.mediaDataList]" doc:name="Set Payload to mediaDataList"/>
                    <flow-ref name="loop_over_assets" doc:name="loop_over_assets"/>
                </foreach>
            </when>
            <otherwise>
                <expression-component doc:name="Do nothing"><![CDATA[// Do nothing]]></expression-component>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="loop_over_assets">
        <foreach collection="#[payload]" doc:name="For each asset" counterVariableName="assetCounter">
            <flow-ref name="publish_asset" doc:name="publish_asset"/>
        </foreach>
    </sub-flow>
    <sub-flow name="publish_asset">
        <set-variable variableName="fragmentId" value="#[payload.fragmentId]" doc:name="Set fragmentId"/>
        <logger message="Sending request to publish #[flowVars.fragmentId] (#[payload.originalFileName])" level="INFO" doc:name="Publishing [fragmentId] ([originalFileName])"/>
        <dw:transform-message doc:name="Create publish message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	correlation_id: flowVars.organisationName ++ '/' ++ flowVars.fragmentId,
	fragment_id: flowVars.fragmentId,
	cp: flowVars.organisationName
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="${rabbit.publishqueue}" responseTimeout="10000" connector-ref="AMQP_0_9_Connector" doc:name="Send a publish request"/>
<!--         <http:request config-ref="Mediahaven_Rest_API" path="/media/#[flowVars.fragmentId]/publish" method="POST" doc:name="Publish asset"> -->
<!--             <http:request-builder> -->
<!--                 <http:header headerName="Authorization" value="${mediahaven.authstring}"/> -->
<!--             </http:request-builder> -->
<!--         </http:request> -->
    </sub-flow>
    <flow name="auto-publish-checkFlow">
        <poll doc:name="Poll every third day of the month (0 0 0 3 * ?)">
            <schedulers:cron-scheduler expression="0 0 0 3 * ?"/>
            <logger level="INFO" doc:name="Logger"/>
        </poll>
        <set-variable variableName="startDate" value="#[new org.mule.el.datetime.DateTime().format(&quot;yyyy-MM-01&quot;)]" doc:name="Set startDate"/>
        <dw:transform-message doc:name="Create aggregate query on ES">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"query": {
		"bool": {
			"filter": [
				{
		        		"term": { "type": "response" }
		    	},
		    	{ "range": { "timestamp": { "gte": flowVars.startDate } } }
	    	]
		}
    },
    "aggs": {
        "counts": {
            "terms": {
                "field": "outcome.keyword",
                "include": ["success", "failed"]
            }
        }
    }
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="Elasticsearch" path="/${es.index}/_search" method="POST" doc:name="Perform query on ES">
            <http:request-builder>
                <http:query-param paramName="size" value="0"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Transform the result">
            <dw:input-payload doc:sample="sample_data/json_4.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{(payload.aggregations.counts.buckets map using (key = $.key, val = $.doc_count)
{'$key': val})}]]></dw:set-payload>
        </dw:transform-message>
                    <until-successful maxRetries="5" millisBetweenRetries="5000" synchronous="true" doc:name="Until Successful">
                <slack:post-message config-ref="Slack__Token_Configuration"       doc:name="Slack" channelId="${slack.channelid}" iconURL="http://findicons.com/files/icons/1393/world_of_aqua_3/128/hal_9000.png" message="[#['${mule.env}']] During the last publish job, #[payload.success] publishes were successful while #[payload.failed == empty ? 0 : payload.failed] failed." username="arch-9000"/>
            </until-successful>
    </flow>
</mule>
